@using ContestMeter.Web.Site.Models
@model ParticipantTaskPartialViewModel

<div class="col-md-12">
    <h2 class="alert alert-info">@Model.CurrentTask.Name</h2>
    
    @if (TempData["Message"] != null && TempData["Message"].ToString() != "")
    {
        <div class="col-md-12 alert alert-info">@TempData["Message"]</div>
        <br />
    }

    @Html.HiddenFor(model => model.ContestId)
    @Html.HiddenFor(model => model.CurrentTaskId)
    @Html.HiddenFor(model => model.CurrentTaskNumber)
    @Html.HiddenFor(model => model.TaskDescriptionFileName)
 
    <div class="alert alert-warning col-md-12">
        <iframe class="col-md-12" src="@Model.TaskDescriptionFileName" height="400" style="border:0; width: 100%; margin-bottom: 25px"></iframe>
        <br />

        <div class="form-group">
            <div class="col-md-10">
                @Html.Label("Компилятор")
                @Html.DropDownListFor(model => model.SelectedDevelopmentToolId, Model.DevelopmentTools, String.Empty)
                @Html.ValidationMessageFor(model => model.SelectedDevelopmentToolId)
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.Label("Загрузить файл с решением") 
                <input type="file" name="fileUpload" />
            </div>
        </div>
    </div>
</div>
